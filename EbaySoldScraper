from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from datetime import datetime
import sqlite3
import re

chrome_options = Options()
chrome_options.add_experimental_option("detach", True)
driver = webdriver.Chrome("D:\\Selenium_python2\\chromedriver.exe", chrome_options=chrome_options)
driver.get("https://signin.ebay.com/ws/eBayISAPI.dll?SignIn&ru=https%3A%2F%2Fwww.ebay.com%2F")

def ebay_start_up(acc_username):
    """
    this logs you into the assigned account you chose
    then from here it takes you to the solds page
    """
    if acc_username == 'rv':
        acc_name = 'TheRealVintage'
        acc_pw = 'Pineappleguy305'
    elif acc_username == 'other':
        acc_name = 'ararr_92'
        acc_pw = 'Fernanda*1979'
    ebay_sold_link = "https://www.ebay.com/sh/ord/?filter=status:ALL_ORDERS"
    #!WHERE THE PASSWORDS SHOULD BE

    WebDriverWait(driver, 40).until(EC.presence_of_element_located(('css selector', '[id="userid"]')))
    username_entry = driver.find_elements('css selector', '[id="userid"]')
    username_entry[0].send_keys(acc_name)
    time.sleep(2)
    username_continue_button = driver.find_element('css selector', '[id="signin-continue-btn"]')
    username_continue_button.click()
    
    WebDriverWait(driver, 80).until(EC.element_to_be_clickable(('xpath', '//*[@id="pass"]')))
    time.sleep(1)
    password_entry = driver.find_element('css selector', '[id="pass"]')
    password_entry.send_keys(acc_pw)
    time.sleep(1)
    sign_in_button = driver.find_element('css selector', '[id="sgnBt"]')
    sign_in_button.click()
    time.sleep(3)
    driver.execute_script(f"window.open('{ebay_sold_link}');")
    driver.switch_to.window(driver.window_handles[-1])
    time.sleep(3)

sold_labels = ['Item Condition', 'Sale Date', 'Brand', 'Department', 'Type', 'Style', 'Size', 'Color']

ebay_title_list = []
ebay_link_list = []
ebay_price_list = []

ebay_item_condition_list = []
ebay_sale_date_list = []
ebay_brand_list = []
ebay_department_list = []
ebay_type_list = []
ebay_style_list = []
ebay_size_list = []
ebay_color_list = []
ebay_start_date_list = []
ebay_images_list = []
ebay_buyer_name_list = []
ebay_images_len_list = []

def ebay_sold_info_scraper():
    """
    while we are on solds page
    this scrapes all sold links then checks for the value info
    """

    sold_labels_strings_list = ['ebay_item_condition_list', 'ebay_sale_date_list', 'ebay_brand_list', 'ebay_department_list', 'ebay_type_list',
                        'ebay_style_list', 'ebay_size_list', 'ebay_color_list'] 

    sold_labels_list = [ebay_item_condition_list, ebay_sale_date_list, ebay_brand_list, ebay_department_list, ebay_type_list,
                        ebay_style_list, ebay_size_list, ebay_color_list]
    
    sold_links = driver.find_elements('xpath', '//*[contains(@href, "https://www.ebay.com/itm/")]')

    for _, links in enumerate(sold_links):
        post_link_class = links.get_attribute('class')
        #!this makes sure that it is checking current solds, if not this will check any links available, such as offers, expired offers, etc
        if 'item-link' in post_link_class:
            continue
        post_link = links.get_attribute('href')
        ebay_title_list.append(links.text)
        ebay_link_list.append(post_link)
        driver.execute_script(f"window.open('{post_link}');")
        driver.switch_to.window(driver.window_handles[-1])

        try:
            WebDriverWait(driver, 4).until(EC.presence_of_element_located(('xpath', "//*[contains(text(), 'View purchased item')]")))
        except:
            ebay_title_list.pop()
            ebay_link_list.pop()
            driver.close()
            driver.switch_to.window(driver.window_handles[-1])
            time.sleep(1)
            continue
            

        WebDriverWait(driver, 10).until(EC.presence_of_element_located(('css selector', '[src^="https://i.ebayimg.com/images/g/"]')))
        image_links = driver.find_elements('xpath', '//*[contains(@src, "1600.png")]')
        img_list = []
        for _, links in enumerate(image_links):
            image_link = links.get_attribute('src')
            # print(f' image_link {image_link}')
            time.sleep(.5)
            img_list.append(image_link)
        the_img_list = "; ".join(img_list)
        ebay_images_len_list.append(len(img_list))
        ebay_images_list.append(the_img_list)

        ebay_start_date = driver.find_elements('xpath', '//*[contains(@class, "ux-textspans")]') #13 characters
        for s, start in enumerate(ebay_start_date):
            if start.text == 'Buyer ID:':
                ebay_buyer_name_list.append(ebay_start_date[s+1].text)
            elif start.text == 'Start time:':
                date_str = ebay_start_date[s+1].text[:13].strip()
                converted_date = datetime.strptime(date_str, '%b %d, %Y').strftime('%m/%d/%Y')
                print(converted_date)
                ebay_start_date_list.append(converted_date)
                break

        view_order_details_button = driver.find_element('css selector', '[class^="d-top-panel-message__cta"]')
        driver.execute_script('arguments[0].click();', view_order_details_button)
        
        checking_for_refund = driver.find_elements('css selector', '[class="sh-neg"]')
        for refund_text in checking_for_refund:
            if refund_text.text == 'Refund':
                ebay_link_list.pop()
                ebay_title_list.pop()
                ebay_images_len_list.pop()
                ebay_images_list.pop()
                ebay_start_date.pop()
                continue

        order_earnings = driver.find_elements('css selector', '[class="sh-bold"]')
        for order_id, order_text in enumerate(order_earnings):
            if order_text.text == 'Order earnings':
                order_earnings = float(order_earnings[order_id + 1].text.replace('$', ''))
                ebay_price_list.append(order_earnings)
                break
        driver.back()

        try:
            WebDriverWait(driver, 6).until(EC.presence_of_element_located(('xpath', "//*[contains(text(), 'View purchased item')]")))
        except TimeoutError:
            driver.refresh()
            WebDriverWait(driver, 8).until(EC.presence_of_element_located(('xpath', "//*[contains(text(), 'View purchased item')]")))

        view_purchased_item = driver.find_element('xpath', "//*[contains(text(), 'View purchased item')]")
        driver.execute_script('arguments[0].click();', view_purchased_item)

        ebay_sold_label = driver.find_elements('css selector', '[class="left wbr cc-labels-values__label"]')
        ebay_sold_info = driver.find_elements('css selector', '[class="left wbr cc-labels-values__value"]')

        used_sold_labels = []
        for s, _ in enumerate(ebay_sold_info):
            if ebay_sold_label[s].text in sold_labels:
                if ebay_sold_label[s].text == "Sale Date":
                    used_sold_labels.append(ebay_sold_label[s].text)
                    date_str = ebay_sold_info[s].text.strip()
                    converted_date = datetime.strptime(date_str, '%b %d, %Y').strftime('%m/%d/%Y')
                    ebay_sale_date_list.append(converted_date)
                else:
                    used_sold_labels.append(ebay_sold_label[s].text)
                    sold_labels_list[sold_labels.index(ebay_sold_label[s].text)].append(ebay_sold_info[s].text)

        used_set = set(used_sold_labels)
        total_set = set(sold_labels)
        missing_labels = list(total_set - used_set)
        for miss in missing_labels: #!this needs some work still
            for s, sold_label in enumerate(sold_labels_strings_list):
                if f'ebay_{miss.lower()}_list' == str(sold_label):
                    sold_labels_list[s].append('')
                    break

        driver.close()
        driver.switch_to.window(driver.window_handles[-1])
        time.sleep(1)

def inserting_or_creating_ebay_database(the_table_name):
    """
    This uploads all the info that we have scraped in our active scraper
    and into our database so that we can use this 
    """
    zipped_list = zip(
        ebay_title_list,
        ebay_price_list,
        ebay_link_list,
        ebay_item_condition_list,
        ebay_buyer_name_list,
        ebay_start_date_list,
        ebay_sale_date_list,
        ebay_brand_list,
        ebay_department_list,
        ebay_type_list,
        ebay_style_list,
        ebay_size_list,
        ebay_color_list,
        ebay_images_list,
        ebay_images_len_list
        )

    combined_list = list(zipped_list)
    conn = sqlite3.connect('D:\\Selenium_python2\\Depop_database.db')
    cursor = conn.cursor()
    table_name = 'ebay_sold_' + the_table_name
    # Create a new table with an auto-incrementing primary key
    try:
        command_create = f"""
            DROP TABLE {table_name}
        """
        cursor.execute(command_create)
    except:
        pass #! if this passed, then there is no table to drop

    command_create = f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ebay_title TEXT UNIQUE,
            ebay_price INT,
            ebay_item_link TEXT,
            ebay_condition TEXT,
            ebay_buyer TEXT,
            ebay_start_date DATE,
            ebay_sale_date DATE,
            ebay_brand TEXT,
            ebay_department TEXT,
            ebay_type TEXT,
            ebay_style TEXT,
            ebay_size TEXT,
            ebay_color TEXT,
            ebay_images TEXT,
            ebay_images_len INT
        )
    """
    cursor.execute(command_create)
    
    # Insert data into the new table
    command_insert = f"""
        INSERT OR IGNORE INTO {table_name} (
            ebay_title,
            ebay_price,
            ebay_item_link,
            ebay_condition,
            ebay_buyer,
            ebay_start_date,
            ebay_sale_date,
            ebay_brand,
            ebay_department,
            ebay_type,
            ebay_style,
            ebay_size,
            ebay_color,
            ebay_images,
            ebay_images_len
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """
    cursor.executemany(command_insert, combined_list)
    conn.commit()
    conn.close()
ebay_start_up('rv')
ebay_sold_info_scraper()
inserting_or_creating_ebay_database('_realvintage')
# print(f' title {ebay_title_list}')
# print(f' price {ebay_price_list}')
# print(f' link {ebay_link_list}')
# print(f' item conditon {ebay_item_condition_list}')
# print(f' sale date {ebay_sale_date_list}')
# print(f' brand list {ebay_brand_list}')
# print(f' department list {ebay_department_list}')
# print(f' type {ebay_type_list}')
# print(f' style {ebay_style_list}')
# print(f' size {ebay_size_list}')
# print(f' color {ebay_color_list}')
# print(f' images {ebay_images_list}')
# print('')
# print(' ')
# print(' ')

# zipped_list = zip(
#     ebay_title_list,#! 
#     ebay_price_list,#! 
#     ebay_link_list,#!
#     ebay_item_condition_list,#!
#     ebay_buyer_name_list,#! 
#     ebay_start_date_list,#! 
#     ebay_sale_date_list,#! 
#     ebay_brand_list,#! 
#     ebay_department_list,
#     ebay_type_list,#! 
#     ebay_style_list,#! 
#     ebay_size_list,#! 
#     ebay_color_list,#! 
#     ebay_images_list#!
#     )

# for zipped in zipped_list:
#     print(zipped)
#     print(' ')
    
    
