from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
import requests
import sqlite3
import time
import os
import traceback



# from text_parser import grailed_pants_category_list, gender_list, tops_bottoms_outerwear_footwear_for_grailed, grailed_brand_list, grailed_category_list, condition_list, size_list, grailed_color_list, general_description
# from ExtractingImages import image_list
# from Extract_info_from_excel import excel_total_titles, excel_total_price
#this import above gives me access to info from text_parser
#muse use and identify where imports are needed

# from text_parser.py import category_list
#figure out how to import functions from other files
chrome_options = Options()
chrome_options.add_experimental_option("detach", True)
driver = webdriver.Chrome("D:\\Selenium_python2\\chromedriver.exe", chrome_options=chrome_options)
driver.get("https://www.grailed.com/sell")
time.sleep(2)

brandss = {
    'Adidas': ['adidas', 'adida'],
    'Mitchell & Ness': ['mitchell', 'ness'],
    'Nike': ['nike', 'nik', 'acg', 'nike '],
    'J. Galt': ['j. galt'],
    'NBA': ['unk', 'nba', 'kobe', 'lebron', 'kd', '76ers', 'hawks', 'bucks', 'bulls', 'cavaliers', 'celtics', 'clippers', 'grizzlies', 'heat', 'hornets', 'jazz', 'kings', 'knicks', 'lakers', 'magic', 'mavericks', 'nets', 'nuggets', 'pacers', 'pelicans', 'pistons', 'raptors', 'rockets', 'spurs', 'suns', 'thunder', 'timberwolves', 'trailblazers', 'warriors', 'wizards'],
    'NFL': ['nfl', 'raider', 'raiders', 'packers', 'lions', 'saints', 'cardinals', 'chargers', 'bucs', 'buccanears', 'browns', 'cowboys', '49er', 'ravens', 'broncos', 'seahawk', 'seahawks', 'panthers', 'jets', 'colts', 'falcons', 'jaguars', 'jags', 'chiefs', 'bills', 'eagles', 'rams', 'titans', 'bengals', 'steelers', 'dolphins', 'patriots', 'vikings', 'commanders', 'redskins'],
    'NHL': ['nhl'],
    'MLB': ['mlb', 'angels', 'astros', 'athletics', 'jays', 'braves', 'brewers', 'cardinals', 'cubs', 'yankees', 'diamondbacks', 'dodgers', 'giants', 'guardians', 'mariners', 'marlins', 'mets', 'nationals', 'orioles', 'padres', 'phillies', 'pirates', 'rangers', 'rays', 'sox', 'reds', 'rockies', 'royals', 'tigers', 'twins', 'sox', 'yankees'],
    'Fox Racing': ['fox', 'foxracing'],
    'NASCAR': ['intimidator', 'nascar', 'busch', 'matt', 'nascar', 'tony', 'dale', 'jimmy', 'johnson', 'jimmie', 'fireball roberts', 'carl long', 'fred lorenzen', 'david reutimann', 'richard childress', 'ned jarrett', 'kyle petty', 'ricky rudd', 'adam petty', 'joe weatherly', 'donnie allison', 'dave marcis', 'tim richmond', 'bobby labonte', 'ricky craven', 'kyle busch', 'geoff bodine', 'bobby allison', 'joey logano', 'junior johnson', 'todd bodine', 'kenny wallace', 'carl edwards', 'denny hamlin', 'jamie mcmurray', 'benny parsons', 'kevin harvick', 'lee petty', 'jeff burton', 'david pearson', 'kurt busch', 'kenseth', 'terry labonte', 'michael waltrip', 'kasey kahne', 'earnhardt', 'cale yarborough', 'alan kulwicki', 'tony stewart', 'jimmie johnson', 'rusty wallace', 'darrell waltrip', 'davey allison', 'dale jarrett', 'mark martin', 'jeff gordon', 'bill elliott', 'dale earnhardt', 'richard petty'],
    
    'Harley Davidson': ['harley', 'davidson'],
    'Anti Social Social Club': ['anti', 'social', 'social club', 'social clubs'],
    'Arc\'tyrex': ['arc', 'tyrex', 'arctyrex', "arc'tyrex"],
    'Armani': ['exchange', 'armmani'],
    'Asics': ['asics', 'asic'],
    'BONGO': ['bongo', 'bongos'],
    'Balenciaga': ['bal', 'enciaga', 'balenciaga', 'balenci'],
    
    'Birkenstock': ['birks', 'birk', 'birkenstock'],
    'Calvin Klein': ['calvin', 'klein', 'calvin klein'],
    'Cambridge Classics': ['cambridge', 'classics'],
    'Buckle': ['buckle', 'bke'],
    'Chalk Line': ['chalk'],
    'Champion': ['champion'],
    'Cherokee': ['cherokee'],
    'Citizens of Humanity': ['citizens', 'humanity', 'humanities', 'humanity'],
    'Coca-Cola': ['coca', 'cola', 'coca-cola'],
    'Cole Haan': ['cole', 'haan', 'colehaan'],
    'Columbia': ['columbia', 'columbi'],
    'Coogi': ['coogi'],
    'DC Comics': ['dc'],
    'Dickies': ['dickies'],
    'Disney': ['goofy', 'mickey', 'duck', 'disney', 'star', 'boba fett'],
    'Dr. Martens': ['martens', 'marten'],
    'Ecko Unltd.': ['ecko', 'unlimited', 'unltd.', 'unltd'],
    'Ed Hardy': ['hardy'],
    'Fear of God': ['fear', 'god', 'fear of god', 'fog'],
    'Forever 21': ['forever'],
    'G-III': ['iii', 'g-iii'],
    'American Vintage': ['vintage', 'vnt', 'vtg', '90\'s'],
    'Goodfellow & CO': ['goodfellow'],
    'Guess': ['guess'],
    'Hard Rock Cafe': ['hard', 'cafe', 'rock cafe'],
    'JNCO': ['jnco'],
    'Jerzees': ['jerzees'],
    'Jordan': ['jordan', 'jordans', 'jorda'],
    'LRG': ['lrg'],
    'Land\'s End': ["land's", 'lands'],
    'Levi': ['levi', 'levis', 'levi\'s'],
    'Liquid Blue': ['liquid'],
    'Looney Tunes': ['acme', 'tweety', 'looney tunes', 'taz', 'sylvester', 'jam'],
    'Lucky Brand': ['lucky'],
    'L.L. Bean': ['ll', 'bean'],
    'Lululemon': ['lululemon', 'lulu'],
    'Marvel': ['marvel', 'spiderman', 'spider-man', 'captain america', 'thor', 'iron man', 'iron-man', 'deadpool', 'marvel'],
    'Miss Me': ['miss'],
    'Murano': 'murano',
    'Nautica': ['nautica'],
    'New Balance': ['balance'],
    'New Era': ['era', 'newera'],
    'Nordstrom': ['nordstrom'],
    'Obermeyer': 'obermeyer',
    'Old Navy': ['oldnavy', 'old'],
    'Oskar Haug': ['haug'],
    'Patagonia': ['pata', 'patagonia'],
    'Planet Hollywood': ['planet', 'hollywood'],
    'Polo Ralph Lauren': ['polo'],
    'Primitive': 'primitive',
    'Pro Player': ['pro player'],
    'Quiksilver': ['quicksilver', 'quiksilver'],
    'RSQ': ['rsq'],
    'Ralph Lauren': ['ralph', 'lauren'],
    'Reebok': ['reebok', 'reeboks'],
    'Rocawear': ['rocawear', 'roca'],
    'Rock Revival': ['revival'],
    'RVCA': 'rvca',
    'Russell Athletics': ['russell', 'russel'],
    'Salty Crew': ['salty', 'crew'],
    'Star Wars': ['star', 'wars', 'boba', 'yoda', 'mandalorian'],
    'Starter': ['starter', 'starters'],
    'Stussy': 'stussy',
    'Supreme': ['supreme'],
    'The Mountain': ['mountain', 'the mountain'],
    'The North Face': ['north', 'northface'],
    'Thrasher': 'thrasher',
    'Timberland': ['timberland', 'timbs', 'timb'],
    'Tommy Bahama': 'bahama',
    'Tommy Hilfigher': ['hilfiger', 'hilfigher'],
    'True Religion': ['true', 'religion'],
    'UGG': 'ugg',
    'Under Armour': ['under', 'armour'],
    'Vans': 'vans',
    'Vineyard Vines': ['vineyard', 'vines', 'vineyards'],
    'Von Dutch': ['von', 'dutch', 'vondutch'],
    'WWE': ['stone cold', 'wwe'],
    'Logo Athletic': ['logo', 'athletic'],
    'Baby Phat': 'phat',
    'American Eagle Outfitters': ['american', 'eagle'],
    'Carhartt': 'carhartt',
    'GANT': 'gant',
    'extras': ['dockers', 'eastland', 'dickies', 'apple', 'aeropostale', 'gymshark', 'guess', 'gymboree', 'ghirardelli', 
                'bebe', 'camel', 'crocs', 'clarks' 'coach', 'dior', 'footjoy', 'ferrari', 'funko', 'fendi',
                'gillette', 'gap', 'keen', 'kith', 'quicksilver', 'minecraft', 'nutmeg', 'obey', 'samsung', 'cabela', 'majestic', 'wrangler', 'woolrich', 'ariat',
                'pendleton', 'converse', 'fila', 'kangol', 'lacoste', 'playboy', 'polaroid', 'chaps', 'billabong', 'zara', 'kappa'],
    

    }

band_tees = {"band": ['acdc', 'kiss', 'metallica', 'system', 'rammstein', 'u2', 'halen', 'rush', 'pumpkins', 'radiohead' 
                      'day', 'peppers', 'sabbath', 'roses', 'machine', 'aerosmith', 'rolling', 'soundgarden', 'disturbed', 'sevenfold',
                      'jovi', 'motorhead', 'weezer', 'muse', 
                      'nirvana', 'weezer', 'slipknot', 'metallica', 'pantera', 'the-beatles', 'maiden', 'linkin', 
                      'floyd', 'metallica', 'judas', 'kiss', 'slayer', 'pearl', 
                       'motley', 'who', 'zeppelin', 'strokes', '182']}

general_description = "PLEASE READ CAREFULLY!! Some items may have unlisted markings, but for the most part all marking would be listed. These clothes are often old and used, so tend to not be in pristine condition. Most items that are listed here will by default be used, unless stated otherwise. Items have not been washed so we also highly recommend that you wash before putting it on.  All items have been handpicked by us. Thank you for choosing to support us at RealVintage._ and if there is anything we can do to make your experience better feel free to send us a message! We also give large discounts if purchasing stuff in bulk."

post_as_draft = False
#got to make a catgory if else like I did with the shirts, for category in terms of clohtes,
# can work on
item_tags = '#Vintage #old #90\'s #used #thrifted #wornbyplayboicarti #sundayservice #grailed #depop #y2k'
count = 0
def men_or_women(men_or_women):
    dep_cat = driver.find_elements('xpath', '//*[contains(@class, "SellFormInput CustomDropDown-module__input___bJK4I")]')
    time.sleep(2)
    driver.execute_script("arguments[0].click();", dep_cat[0])
    department_options = driver.find_elements('xpath', '//*[contains(@class, "Option-module__option___jXhrC DepartmentOptions-module__department___03QZy")]')
    if men_or_women == 'WMN':
        department_options[1].click()
    else:
        department_options[0].click()

def tops_or_bottoms_or_etc(item_tags):
    print('item tags:', item_tags)
    top_bottom = driver.find_elements('xpath', '//*[@data-cy="category-option"]')
    if item_tags == "Tops":
        try:
            top_bottom[0].click()
        except:
            driver.execute_script('arguments[0].click();', top_bottom[0])
    elif item_tags == "Bottoms":
        top_bottom[1].click()
    elif item_tags == "Outerwear":
        top_bottom[2].click()
    elif item_tags == "Shoes":
        top_bottom[3].click()
    elif item_tags == 'Accessories':
        top_bottom[5].click()

def sub_category(item):
    global item_tags
    print('item ' + item)
    sub_category_option = item
    if sub_category_option == 'T-shirts':
        sub_category_option = 'Short Sleeve T-Shirts'
    elif sub_category_option in ['Sweatshirts', 'Hoodie']:
        sub_category_option = 'Sweatshirts & Hoodies'
    elif sub_category_option == "Jeans":
        sub_category_option = 'Denim'
    elif sub_category_option in ['Joggers', 'Sweatpants']:
        sub_category_option = 'Sweatpants & Joggers'

    sub_category_lists = driver.find_elements('css selector', "[data-cy='subcategory-option']")
    i = 0
    for x in sub_category_lists:
        if x.text == sub_category_option:
            try:
                x.click()
            except:
                driver.execute_script("arguments[0].click();", x)
            break
        i += 1




def brand_adder(title_of_the_item):
    global v
    global new_brand
    found_brand = False

    #band tee identifier
    for word in title_of_the_item:
        for key, value in band_tees.items():
            while found_brand == False:
                if any([word == v.lower() for v in value]):
                    for v in value:
                        if v.lower() in title_of_the_item:
                            print(v.title())
                            new_brand = v.lower()
                            found_brand = True
                            break
                break
    print('numba 2')
    for word in title_of_the_item:
        for key, value in brandss.items():
            while found_brand == False:
                if any([word == v.lower() for v in value]):
                    if key == 'extras':
                        print('key is extras')
                        for v in value:
                            if v.lower() in title_of_the_item:
                                print('found a brand in designer')
                                print(v.title())
                                new_brand = v.lower()
                                found_brand = True
                                break
                    else:
                        new_brand = key
                        found_brand = True
                        print('new_brand ' + new_brand)
                        break
                    print(new_brand)
                    return new_brand
                break

def category_identifier():
    global i, skip_this
    skip_this = False
    categories = driver.find_elements('xpath', '//*[contains(@class, "CustomDropDown-module__input___")]')
    main_cat = categories[0].get_attribute('value')
    print(main_cat)
    if main_cat == '':
        print(' ')
        print(' ')
        skip_this = True


def designer_field(designer):
    global post_as_draft
    if designer == 'american vintage':
        designer = 'vintage'
    elif designer == ' ':
        try: 
            designer_to_skip = driver.find_element('xpath', '//*[contains(class,"NO_GLOBAL_STYLE SellFormInput disabled")]')
            post_as_draft = True
            print('designer post draft')
        except Exception as e:
            print(e)
            traceback.print_exc()
            print('brand not found in dictionary')
            designer_text = designer
            title_of_item = designer_text.lower().split(' ')

            brand_adder(title_of_item)

            
            # for key, value in brandss.items():
            #     if any([v.lower() in title_of_item for v in value]):
            #         print(key)
            #         if key == 'extras':
            #             print('key is extras')
            #             for v in value:
            #                 if v.lower() in title_of_item:
            #                     found_brand = True
            #                     print('found a brand in designer')
            #                     print(v.title())
            #                     break
            #         else:
            #             if found_brand == False:
            #                 new_brand = key
            #                 print('no extra for found brand')
            #                 print(new_brand)
            #                 found_brand = True
            #             else:
            #                 new_brand = key
            #                 print('either extra or post already had a brand')
            #                 print(new_brand)
            #                 if new_brand.title() == designer_text.title():
            #                     print('new and old brand match')
            #                     break
            #                 else:
            #                     time.sleep(2)
            #                     print('brand was found, now need to add')
            #                     print('new brand')
            #                     print(' ')
            #                     designer = new_brand
            #                     break
            
    print(designer)
    print('starting script for designer')

    option_to_select = designer.lower()
    print(option_to_select)  

    designer_txt_field = driver.find_element('xpath', '//*[@id="designer-autocomplete"]')
    driver.execute_script("arguments[0].click();", designer_txt_field)

    time.sleep(1)

    for letter in designer:
        designer_txt_field.send_keys(letter)
        time.sleep(.1)
          # you have to enter some character to search and select the value of the string 'option_to_select'
    time.sleep(2)

    option_list = driver.find_elements('xpath','//*[contains(@class, "Designer-module__menuItem__")]')
    for option in option_list:
        option_text = option.text
        option_text_lower = option_text.lower()
        print(option_text_lower)
        time.sleep(1)
        if option_text_lower == option_to_select:
            print('matching option_text')
            try:
                option.click()
                print('click 1 designer')
            except:
                driver.execute_script("arguments[0].click();", option)
                print('click 2 designer')
            break  

def size(clothes_size):
    global post_as_draft
    global sizetext
    try:
        if clothes_size == 'XXS':
            clothes_size = 'US XXS / EU 40'
        elif clothes_size == 'XS':
            clothes_size = 'US XS / EU 42 / 0'
        elif clothes_size == 'S':
            clothes_size = 'US S / EU 44-46 / 1'
        elif clothes_size == 'M':
            clothes_size = 'US M / EU 48-50 / 2'
        elif clothes_size == 'L':
            clothes_size = 'US L / EU 52-54 / 3'
        elif clothes_size == 'XL':
            clothes_size = 'US XL / EU 56 / 4'
        elif clothes_size == 'XXL':
            clothes_size = 'US XXL / EU 58 / 5'
        else:
            clothes_size = 'US XXL / EU 58 / 5'
        print(clothes_size)
        select = Select(driver.find_element('xpath', '//*[@id="SellForm"]/div/div[2]/form/div[1]/div/div[2]/select'))
        
        try:
            select.select_by_visible_text(clothes_size)
        except:
            updated_clothes_size = "US " + str(clothes_size)
            eu_num_for_pants = int(clothes_size) + 16 
            print(eu_num_for_pants)
            updated_clothes_size = updated_clothes_size + " / EU " + str(eu_num_for_pants)

            print(updated_clothes_size)
            select.select_by_visible_text(updated_clothes_size)
    except:
        print('size could not be chosen')
        post_as_draft = True

def condition(cond):
    select = Select(driver.find_element('xpath', '//*[@id="SellForm"]/div/div[2]/form/div[4]/select'))
    if cond == 'New':
        item_condition = 'New/Never Worn'
    elif cond == 'Damaged':
        item_condition = 'Very Worn'
    else:
        item_condition = 'Used'
    select.select_by_visible_text(item_condition)

def shipping_price():
    driver.find_element('xpath', '//*[@id="MyOwnShippingOptionWrapper"]').send_keys()

def item_name(name):
    global post_as_draft
    title_to_put_name = driver.find_element('xpath', '//*[@id="SellForm"]/div/div[2]/form/div[2]/input')
    if len(name) > 60:
        print('name too long')
        title_to_put_name.send_keys(name)
        post_as_draft = True
    else:
        title_to_put_name.send_keys(name)

def item_color(color):
    driver.find_element('xpath', '//*[@id="color-autocomplete"]').send_keys(color)

def add_description(desc):
    driver.find_element('xpath', '//*[@id="SellForm"]/div/div[2]/form/div[5]/textarea').send_keys(desc)

def adding_tags(tags):
    text_tag = driver.find_elements('xpath', '//*[contains(@class, "-hashtag-input")]')
    print(len(tags))
    try:
        text_tag[0].send_keys(tags)
        print('click 1')
    except:
        text_tag[1].send_keys(tags)
        print('click 2')

def add_price(price):
    input_price = driver.find_element('css selector', '[placeholder="Price (USD)"]')
    int_price = int(price)
    input_price.send_keys(int_price)

def ship_switch():
    ship_switch_button = driver.find_elements('xpath', '//*[contains(@class, "TabButton-module__label__")]')
    ship_switch_button[1].click()

def smart_price_activation():
    sliders = driver.find_elements('xpath','//*[contains(@class, "--slider")]')
    print(len(sliders))
    sliders[1].click()

pstart = count * 4 
#create some sort of loop so this can all just be one loop, with an iteration variable that counts up to 4 every time, which also increase the amount of remove_buttons needing
# to be visible after every time, which also allows it to wait until the remove_buttons are visible somehow with the remove_button

def db_adding_pics():
    global id_num
    print('printing pics')
    current_images = 'depop_pics'
    time.sleep(1)
    pic_time = 8
    photo = driver.find_element('xpath', '//*[@id="photo_input_0"]')
    driver.execute_script("arguments[0].scrollIntoView(true)",photo)
    # pictures = WebDriverWait(driver, 10).until(EC.presence_of_element_located(('xpath', '//*[@id="imageInput"]')))
    try:
        for num in range(1,10000):
            print('printing num', num)
            image_dir = 'D:\Selenium_python2\Pic_folder\depop_pics' 
            image_files = [f for f in os.listdir(image_dir) if f.startswith(str(id_num) + '_picture')]
            
            if len(image_files) == 0:
                print('breaking this loop')
                break
            image_count = 0
            print('starting of pics')
            for image in image_files:
                if image_count == 4:
                    break
                else:
                    driver.find_element('xpath', '//*[@id="photo_input_' + str(image_count) + '"]').send_keys("D:\\Selenium_python2\\Pic_folder\\depop_pics\\" + image)
                    print(image)
                    time.sleep(pic_time)
                    print('image has been printed')
                    image_count += 1
            break
    except:
        print('pic is finished / didnt work')

def publish_or_draft_button():
    global post_as_draft
    if post_as_draft == False:
        post_button = driver.find_element('xpath', '//*[@id="SellForm"]/div/div[2]/form/div[11]/div/button[2]')
        post_button.click()
    elif post_as_draft == True:
        draft_button = driver.find_element('xpath', '//*[contains(@class, "Button-module__button___fE9iu Button-module__large___wYagY Button-module__secondary___gYP5i ActionTray-module__action___4eHA6")]')
        draft_button.click()

def next_post():
    driver.find_element('xpath', '//*[@id="globalHeaderWrapper"]/div/div[2]/div[1]/a/button/p').click()
    print('first clicked')
    time.sleep(3)
    new_listing = WebDriverWait(driver, 40).until(EC.presence_of_element_located(('xpath', "//*[contains(@class, 'NewListingButton_button')]")))
    new_listing.click()

def grailed_start_up():
    global title
    time.sleep(2)
    log_in_button = driver.find_element('xpath', '//*[@id="app"]/div[7]/div/div/div/div[2]/div/div/p[2]/a')
    log_in_button.click()
    time.sleep(3)
    # log_in_button2 = driver.find_element('xpath', '//*[contains(@class, "Button-module__button___fE9iu Button-module__large___wYagY Button-module__primary___11+Ra AuthModal-Button _email _login")]')
    log_in_button2 = driver.find_element('css selector', '[data-cy="login-with-email"]')
    log_in_button2.click()
    time.sleep(2)
    google_email = driver.find_element('xpath', '//*[@id="email"]')
    google_email.send_keys("argelarroyo2001@gmail.com")
    driver.find_element('xpath', '//*[@id="password"]').send_keys('Pineappleguy305')
    time.sleep(1)
    driver.find_element('xpath', '//*[@id="app"]/div[7]/div/div/div/div[2]/div/div/form/button').click()

def depop_database_extractor():
    global id_num
    global db_title, db_brand, db_size, db_color1, db_condition, db_price, db_men_or_wmn, db_category, db_gen_cat, db_images, db_image_list, db_total_count
    conn = sqlite3.connect("D:\Selenium_python2\Depop_database.db")

    # Create a new cursor to execute queries against the database
    cursor = conn.cursor()

    # query = "SELECT dp_title FROM depop_inventory WHERE id = 1;"
    # Execute the SQL query
    db_title = cursor.execute("SELECT dp_title FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_title[0]) 

    db_brand = cursor.execute("SELECT dp_brand FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_brand[0])

    db_size = cursor.execute("SELECT dp_size FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_size[0])

    db_color1 = cursor.execute("SELECT dp_color1 FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_color1[0])

    db_price = cursor.execute("SELECT dp_price FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_price[0])

    db_condition = cursor.execute("SELECT dp_condition FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_condition[0])

    db_men_or_wmn = cursor.execute("SELECT dp_men_or_wmn FROM dp_realvintage_inv WHERE id =  " + str(id_num) + ";").fetchone()
    print(db_men_or_wmn[0])

    db_category = cursor.execute("SELECT dp_category FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_category[0])

    db_gen_cat = cursor.execute("SELECT dp_gen_category FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()
    print(db_gen_cat[0])

    db_images = cursor.execute("SELECT dp_images FROM dp_realvintage_inv WHERE id = " + str(id_num) + ";").fetchone()

    

    db_image_list = db_images[0].split('; ')
    print(len(db_image_list))
    for image in db_image_list:
        print(image)
        print('yuh yuh')
        response = requests.get(image)
        open('picture.jpg', 'wb').write(response.content)

        # Upload the picture
        upload_url = 'https://example.com/upload'
        files = {'picture': open('picture.jpg', 'rb')}
        response = requests.post(upload_url, files=files)

        # Check the response
        if response.status_code == 200:
            print('Picture uploaded successfully!')
        else:
            print('Picture upload failed')
    # print(images[0])
    # Fetch the results from the database
    # results = cursor.fetchall()
    
    # for row in results:
    #     print(row[0])

    # Close the cursor and the database connection
    cursor.close()
    conn.close()

def uploading_pics_to_file():
    global id_num
    conn = sqlite3.connect("D:\Selenium_python2\Depop_database.db")

    # Create a new cursor to execute queries against the database
    cursor = conn.cursor()
    total_count_of_rows = cursor.execute("SELECT COUNT(*) FROM dp_realvintage_inv").fetchone()
    print('total row count', total_count_of_rows[0]) 
    # for i in range(total_count_of_rows[0]):
    pic_num = id_num
    print('pic_num', pic_num)
    # for i in range(4):
    try:
        for i in range(total_count_of_rows[0]):
            print(pic_num)
            db_images = cursor.execute("SELECT dp_images FROM dp_realvintage_inv WHERE id = " + str(pic_num) + ";").fetchone()
            db_image_list = db_images[0].split('; ')

            print('len of image list', len(db_image_list))
            for i, image in enumerate(db_image_list):
                filename = f"{pic_num}_picture_{i}_.jpg"
                filepath = os.path.join("D:\Selenium_python2\Pic_folder\depop_pics", filename)

                # Download the picture
                response = requests.get(image)
                open(filepath, 'wb').write(response.content)

                # Upload the picture
                upload_url = image
                files = {'picture': open(filepath, 'rb')}
                response = requests.post(upload_url, files=files)

            pic_num += 1
    except:
        print(' uplading is finished ')
            
def grailed_db_poster():
    global post_as_draft
    global id_num
    global db_title, db_brand, db_size, db_color1, db_condition, db_price, db_men_or_wmn, db_category, db_gen_cat, db_images, db_image_list, db_total_count
    global title
    global count
    print('Starting Grailed Poster')
    # checking_all_match()
    grailed_start_up()

    conn = sqlite3.connect("D:\Selenium_python2\Depop_database.db")
    cursor = conn.cursor()
    db_total_count = cursor.execute("SELECT COUNT(*) as total_count FROM dp_realvintage_inv").fetchone()
    print(db_total_count[0])
    for i in range(int(db_total_count[0])):
        depop_database_extractor()
        time.sleep(6)
        
        title = WebDriverWait(driver, 40).until(EC.presence_of_element_located(('xpath', "//*[contains(@class, 'details-container section')]")))

        db_adding_pics()

        driver.execute_script("arguments[0].scrollIntoView(true)",title)
        print(db_men_or_wmn[0])
        men_or_women(db_men_or_wmn[0])
        
        time.sleep(2)
        print(db_gen_cat[0])
        tops_or_bottoms_or_etc(db_gen_cat[0])
        time.sleep(2)

        print(db_category[0])
        sub_category(db_category[0])

        # # Item Name
        print(db_title[0])
        item_name(db_title[0])

        # # Designer field
        #brand
        print(db_brand[0])
        designer_field(db_brand[0])

        # # # Size field
        print(db_size[0])
        size(db_size[0])

        # # Item Color
        print(db_color1[0])
        item_color(db_color1[0])

        # #item condition
        print(db_condition[0])
        condition(db_condition[0])

        # #Item description
        #     #doesnt need info
        add_description(general_description)

        # #adding tag
        #     #doesnt need info
        adding_tags(item_tags)

        # # Adding Price
        print(db_price[0])
        add_price(db_price[0])

        
        # #turning off smart price
        # #doesnt need info
        smart_price_activation()
        time.sleep(1)

        grailed_shipping_label = driver.find_elements('xpath', '//*[contains(@class, "GrailedLabel-module__option___")]')
        driver.execute_script('arguments[0].scrollIntoView(true);', grailed_shipping_label[-1])
        # # Switch to my own shipping
        ship_switch()
        time.sleep(1)

        #clicking the shipping
        bottom_of_page = driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        bottom_of_page
        
        driver.find_element('xpath', '//*[@id="MyOwnShippingWrappermyOwnShipping"]').click()
      
        time.sleep(20)
        publish_or_draft_button()
        time.sleep(8)

        try:
            too_long_text = driver.find_element('xpath', '//*[contains(@class, "FieldErrorMessage-module__error___")]')
            too_long_text
            print('text too long')
            post_as_draft = True
        except:
            pass
        #go to next post
        next_post()
        print('finished ' + str(id_num))
        id_num += 1
        print('start ' + str(id_num))

def scroll_down_script_grailed_draft():
    last_height = driver.execute_script("return document.body.scrollHeight")
    
    #zoom out
    driver.execute_script("document.body.style.zoom='125%'")
    
    # while True:
    for i in range(8):
        print('scroll_down')
        #scroll down
        driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
        time.sleep(1)
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            print('the end of scrolling')
            break
        last_height = new_height

def after_draft_adder():
    global new_brand, i, skip_this

    grailed_start_up()
    time.sleep(6)
    
    title = WebDriverWait(driver, 40).until(EC.presence_of_element_located(('xpath', "//*[contains(@class, 'details-container section')]")))

    #sell button 
    driver.find_element('xpath', '//*[contains(@class, "SellButton-module__button___")]').click()

    #draft button
    draft_button = driver.find_elements('xpath', '//*[contains(@class, "Link_link__")]')
    draft_button[2].click()
    
    time.sleep(3)

    scroll_down_script_grailed_draft()
    
    #gives me time to manually load in all the columns rather than constantly refreshing it and risking it getting stuck

    link_for_element = driver.find_elements('xpath', '//*[contains(@class, " Buttons_edit")]')
    i = 0
    #script to find 90%
    all_complete_draft_buttons = driver.find_elements('xpath', '//*[contains(@class, "ThumbnailAndInfo_percentageComplete__")]')


    for buttons in all_complete_draft_buttons:
        buttons_text = buttons.text

        if buttons_text == "90% complete" or buttons_text == "81% complete":
            print(' ')
            print(' ')
            print(' ')
            print(buttons_text)
            driver.execute_script('arguments[0].scrollIntoView(true);', link_for_element[i])
            driver.execute_script('arguments[0].click();', link_for_element[i])

            time.sleep(.5)
            #switches window and waits for the cat_value to pop up to start the next part of the script
            driver.switch_to.window(driver.window_handles[1])
            cat_value_waiter = WebDriverWait(driver, 40).until(EC.presence_of_element_located(('xpath', '//*[contains(@class, "SellFormInput CustomDropDown-module__input___")]')))

            #gives me the cat value
            category_value = driver.find_elements('xpath', '//*[contains(@class, "SellFormInput CustomDropDown-module__input___")]')
            name_text = category_value[1].get_attribute('value')
            print('name_text ' + name_text)

            category_identifier()
            if skip_this == False:
            #hat function
                if name_text == "Hats":
                    print('is hats')
                    time.sleep(3)
                    
                    add_size = driver.find_element('xpath', '//*[contains(@class, "SizeSelect-module__selectMenu___")]')
                    add_size.click()

                    time.sleep(3)
                    try:
                        driver.find_element('css selector', '[value="one size"]').click()
                        print('size has been clicked')
                    except:
                        print('already been clicked')
                    time.sleep(1)
                else:
                    print('not hats')
                
                #iniializes the has_brand formula
                has_brand = False
                print('after checking hats')
                
                #get the title and break it down into a list to set up to find the brand for it
                item_title = driver.find_element('xpath', '//*[@class="SellFormInput"]')
                item_text = item_title.get_attribute('value')
                item_text_split = item_text.lower().split(' ')
                print(' ')
                print(item_text)
                print(' ')

                #brand adder function
                brand_adder(item_text_split)

                #gets the current value for brand and matches it
                current_brand_name = driver.find_element('xpath', '//*[contains(@class, "NO_GLOBAL_STYLE SellFormInput")]')
                brand_name_value = current_brand_name.get_attribute('value')
                print('current brand name' + str(brand_name_value) + 'yuh')

                #gets value of the brand
                if brand_name_value == "":
                    print('empty brand name')
                    pass
                else:
                    print('ALREADY HAS BRAND')
                    has_brand = True
                designer = new_brand.lower()
                print('designer ' + designer)
                if designer == 'american vintage':
                    designer = 'vintage'
                elif designer == 'looney tunes':
                    designer = 'warner bros'

                if has_brand == False:
                    option_to_select = designer.lower()
                    print(option_to_select)  

                    designer_txt_field = driver.find_element('xpath', '//*[@id="designer-autocomplete"]')
                    driver.execute_script("arguments[0].click();", designer_txt_field)

                    time.sleep(1)
                    print(designer)
                    try:
                        for letter in designer:
                            designer_txt_field.send_keys(letter)
                            time.sleep(.1)
                    except:
                        print('not able to put brand here')
                        driver.close()
                        driver.switch_to.window(driver.window_handles[0])
                        break
                        # you have to enter some character to search and select the value of the string 'option_to_select'

                    time.sleep(2)
                    brand_was_clicked = False
                    option_list = driver.find_elements('xpath','//*[contains(@class, "Designer-module__menuItem__")]')
                    for option in option_list:
                        option_text = option.text
                        option_text_lower = option_text.lower()
                        time.sleep(.4)
                        if option_text_lower == option_to_select:
                            try:
                                option.click()
                                print('click 1 designer')
                            except:
                                driver.execute_script("arguments[0].click();", option)
                                print('click 2 designer')
                            brand_was_clicked = True
                            break
                            
                        if brand_was_clicked == False:
                            print('no brand was able to be pressed')
                    title = WebDriverWait(driver, 40).until(EC.presence_of_element_located(('xpath', '//*[contains(@class, "ActionTray-module__action___")]')))

                publish1_save0_button = driver.find_elements('xpath', '//*[contains(@class, "module__action___")]')
                publish1_save0_button[1].click()
                time.sleep(2)
                try:
                    too_long_text = driver.find_element('xpath', '//*[contains(@class, "FieldErrorMessage-module__error___")]')
                    too_long_text
                    print('text too long')

                    publish1_save0_button[0].click()
                    print('save button has been pressed')
                except:
                    pass

            else:
                print('skip this == False')   
                time.sleep(1)

            print(' ')
            print(' ')
            print('driver driver driver')
            driver.close()
            driver.switch_to.window(driver.window_handles[0])
            time.sleep(2)


        print('i + 1')
        i += 1

#  depends if the pics need to be uploaded or not, already have a file for this
id_num = 522
# uploading_pics_to_file()
# grailed_db_poster()
after_draft_adder()

#find a way to find out with categories are empty, to filter more about the brand#
#closer and closer to it just need to finish it so it can loop through everything smoothly, has an issue where it doesnt read the 90% complete conditional,
#but also want to work to try to get it to work with 80% and stuff, just need to be able to identify the texts in the 4 total categories
#see which ones ares empty


# if cat == "":
#     skip

